openapi: 3.0.1
info:
  title: Seca API
  description: This is a simple API for managing events
  contact:
    email: 
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - description: Localhost server for testing API
    url: http://localhost:1993

security:
  - bearerAuth: []
tags:
- name: Events
- name: Groups
- name: Users
paths:
  /users:
    description: The resource that contains all users
    post:
      tags:
      - Users
      summary: adds a user
      description: Adds a user to the system
      operationId: addUser
      security: []
      requestBody:
        description: User to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
        required: true
      responses:
        201:
          description: user added
          content:
            application/json:
              schema:
                required:
                - token
                type: object
                properties:
                  token:
                    type: string
                    format: uuid
        400:
          description: Invalid input, object invalid
          content: {}
  /events:
    description: Resource that contains all events
    get:
      tags:
      - Events
      summary: get Events
      description: By passing in the appropriate options, you can Search events by name
      operationId: getEventsByName
      parameters:
        - name: keyword
          in: query
          description: Query to match in event title
          schema: 
            type: string
          required: false
        - name: s
          in: query
          description: number of events to return
          schema:
            default: 30
            minimum: 0
            type: integer
        - name: p
          in: query
          description: The page number
          schema:
            maximum: 50
            minimum: 0
            default: 1
            type: integer
      responses:
        200:
          description: get all events that match the keyword, with the specified criteria and pagination 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        400:
          $ref: "#/components/responses/400BadRequest"    
  /events/popular:
    description: Resource that contains the most popular events
    get:
      tags:
      - Events
      summary: get most popular Events
      description: You can get the list of the most popular events
      operationId: getPopularEvents
      parameters:
        - name: s
          in: query
          description: number of events to return
          schema:
            default: 30
            minimum: 0
            type: integer
        - name: p
          in: query
          description: The page number
          schema:
            maximum: 50
            minimum: 0
            default: 1
            type: integer
      responses:
        200:
          description: get the most popular events, with the specified criteria and pagination 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        400:
          $ref: "#/components/responses/400BadRequest"   
  /groups:
    description: Resource that contains all groups of events
    get:
      tags:
      - Groups
      summary: get all groups of events
      description: You can get the list of groups of events
      operationId: getGroups
      security:
        - bearerAuth: []
      responses:
        200:
          description: get all groups 
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        400:
          $ref: "#/components/responses/400BadRequest"   
    post:
      tags:
      - Groups
      summary: creates a group
      description: Adds a group to the system
      operationId: createGroup
      security:
        - bearerAuth: []
      requestBody:
        description: Group to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGroup'
        required: false
      responses:
        201:
          description: Group created
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/NewGroupCreated'
        400:
          description: Invalid input, object invalid
          content: {}
  /groups/{groupId}:
    description: The resource that represents one given group
    get:
      tags:
      - Groups
      summary: Get a group by its id
      operationId: getGroupById
      security:
        - bearerAuth: []
      parameters:
      - name: groupId
        in: path
        description: ID of group to be fetched
        required: true
        schema:
          type: integer
          minimum: 0
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"                
    put:
      tags:
      - Groups
      summary: edits a group
      description: Edits a group in the system
      operationId: editGroup
      parameters:
      - name: groupId
        in: path
        description: ID of group to be fetched
        required: true
        schema:
          type: integer
          minimum: 0
      requestBody:
        description: Edit the group's information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGroup'
        required: false
      responses:
        201:
          description: group edited
          content: {}
        404:
          $ref: "#/components/responses/404NotFound"  
    delete:
      tags:
      - Groups
      summary: Delete a group by ID
      description: Delete a group by ID
      operationId: deleteGroup
      parameters:
      - name: groupId
        in: path
        description: ID of the group to be deleted
        required: true
        schema:
          type: integer
      responses:
        200:
          description: "Group successfully deleted"
          content: {}
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"
  /groups/{groupId}/events:
    description: Resource that contains all events of a given group
    post:
      tags:
      - Groups
      summary: adds an event to a group
      description: Adds an event to a given group
      operationId: addEventToGroup
      security:
        - bearerAuth: []
      parameters:
      - name: groupId
        in: path
        description: ID of group in which the event is to be added
        required: true
        schema:
          type: integer
          minimum: 0
      requestBody:
        description: Event to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewGroup'
        required: false
      responses:
        201:
          description: Event added to group
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/NewGroupCreated'
        400:
          description: Invalid input, object invalid
          content: {}
  /groups/{groupId}/events/{eventId}:
    description: Resource that contains one event of a given group
    delete:
      tags:
      - Groups
      summary: delete an event from a group by ID
      description: Delete an event from a group by ID of the group and ID of the event
      operationId: deleteEventFromGroup
      parameters:
      - name: groupId
        in: path
        description: ID of the group from which the event is to be deleted
        required: true
        schema:
          type: integer
      - name: eventId
        in: path
        description: ID of the event to be deleted
        required: true
        schema:
          type: integer
      responses:
        200:
          description: "Event successfully deleted from the group"
          content: {}
        400:
          $ref: "#/components/responses/400BadRequest"
        404:
          $ref: "#/components/responses/404NotFound"
components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
  schemas:
    NewEvent:
      required:
      - title
      type: object
      properties:
        title:
          type: string
          example: Study Http
        description:
          type: string
          example: To develop web applications, knowing HTTP is fundamental
    Event:
      allOf: 
        - $ref: "#/components/schemas/NewEvent"
        - type: object
          required:
          - id
          - userId
          properties:
            id:
              type: integer
              example: 1
            userId:
              type: integer
              example: 1
    NewUser:
      type: object
      required:
      - userName
      properties:
        userName:
          type: string
          example: antonio.silva
    NewEventCreated:
      required:
      - status
      - event
      type: object
      properties:
        status:
          type: string
          example: Event with id 123 created with success
        event:
          $ref: '#/components/schemas/Event'
    MissingParameter:
      type: object
      properties:
        error:
          type: string
          example: "Missing required parameter"
    InvalidBody:
      type: object
      properties:
        error:
          type: string
          example: "Invalid body content"
    NotFound: 
      type: object
      properties:
        uri:
          type: string
          format: uri
          example: "/events/1"
        description:
          type: string
          example: "Event with id 1 not found"
  responses: 
    404NotFound:
      description: "Resource not found"
      content: 
        application/json:
          schema: 
            $ref: "#/components/schemas/NotFound"
    400BadRequest:
      description: "Invalid Request because of a missing Parameter or invalid body content"
      content: 
        application/json:
          schema: 
            oneOf:
              - $ref: "#/components/schemas/MissingParameter"
              - $ref: "#/components/schemas/InvalidBody"
              
            
      